<template>
  <b-row>
    <b-col xl="5" lg="5" md="12" sm="12" class="custom-mobile">
      <!-- BIODATA  -->
      <b-card>
        <div class="card-header d-flex justify-content-between">
          <div class="header-title">
            <h4 class="card-title" style="font-weight: bold; font-size: 20px">BIODATA RESPONDEN <span style="color: red">*</span></h4>
          </div>
        </div>
        <hr />
        <div class="card-body" style="font-weight: bold">
          <b-row>
            <b-col md="12" class="form-group">
              <label class="form-label text-dark">Nama:</label>
              <input type="text" class="form-control" v-model="inputNama" />
            </b-col>
            <b-col md="6" class="form-group mt-2">
              <label class="form-label text-dark">Usia</label>
              <input type="number" class="form-control" v-model="inputUsia" @input="validateAge" />
              <small style="color: red" v-if="isAgeInvalid">Minimal 17 tahun.</small>
            </b-col>
            <b-col md="6" class="form-group mt-2">
              <label class="form-label text-dark">Jenis Kelamin</label>
              <select name="type" class="selectpicker form-control" v-model="selectedJenisKelamin">
                <option value="">- Pilih -</option>
                <option value="male">Laki-Laki</option>
                <option value="female">Perempuan</option>
              </select>
            </b-col>
            <b-col md="12" class="form-group mt-2">
              <label class="form-label text-dark">No HP: (optional)</label>
              <input type="number" class="form-control" placeholder="08xx-xxxx-xxxx" v-model="inputNoHp" />
            </b-col>
          </b-row>
        </div>
      </b-card>

      <!-- WILAYAH  -->
      <b-card>
        <div class="card-header d-flex justify-content-between">
          <div class="header-title">
            <h4 class="card-title" style="font-weight: bold; font-size: 20px">WILAYAH</h4>
          </div>
        </div>
        <hr />
        <div class="card-body" style="font-weight: bold">
          <b-row class="text-dark" style="font-weight: bolder">
            <b-col md="6" class="mt-2">
              <b-form-group label="Provinsi: *">
                <b-form-select v-model="this.rid" disabled>
                  <option :value="this.rid" selected>{{ this.rname }}</option>
                </b-form-select>
              </b-form-group>
            </b-col>
            <b-col md="6" class="mt-2">
              <b-form-group label="Kota/Kabupaten: *">
                <b-form-select v-model="selectedCity" @change="fetchDistricts" :disabled="!cityFetched">
                  <option :value="null" disabled>Pilih Kota/Kabupaten</option>
                  <option v-for="city in cities" :key="city.code" :value="city.code">{{ city.name }}</option>
                </b-form-select>
              </b-form-group>
            </b-col>

            <b-col md="6" class="mt-2">
              <b-form-group label="Kecamatan: *">
                <b-form-select v-model="selectedDistrict" @change="fetchVillages" :disabled="!selectedCity || !districtFetched">
                  <option :value="null" disabled>Pilih Kecamatan</option>
                  <option v-for="district in districts" :key="district.code" :value="district.code">{{ district.name }}</option>
                </b-form-select>
              </b-form-group>
            </b-col>

            <b-col md="6" class="mt-2">
              <b-form-group label="Kelurahan: *">
                <b-form-select v-model="selectedVillage" @change="gatheringRegion" :disabled="!selectedDistrict || !villageFetched">
                  <option :value="null" disabled>Pilih Kelurahan</option>
                  <option v-for="village in villages" :key="village.code" :value="village.code">{{ village.name }}</option>
                </b-form-select>
              </b-form-group>
            </b-col>

            <b-col md="12" class="form-group">
              <label class="form-label text-dark">Dusun:</label>
              <input type="text" class="form-control" v-model="inputDusun" placeholder="(tidak wajib diisi)" />
            </b-col>

            <div class="mt-2 pt-4 pb-2" style="border-radius: 20px; background: #3a57e80d">
              <b-row>
                <b-col xl="6" lg="6" md="6" sm="6">
                  <b-form-group label="RT: *">
                    <b-form-input type="number" class="form-control" v-model="inputRT" :disabled="!selectedVillage" />
                  </b-form-group>
                </b-col>
                <b-col xl="6" lg="6" md="6" sm="6">
                  <b-form-group label="RW: *">
                    <b-form-input type="number" class="form-control" v-model="inputRW" :disabled="!selectedVillage" />
                  </b-form-group>
                </b-col>
              </b-row>
            </div>
          </b-row>
        </div>
      </b-card>
    </b-col>

    <!-- SURVEY  -->
    <b-col xl="7" lg="7" md="12" sm="12">
      <div class="card-header bg-primary d-flex justify-content-between mt-4 mb-4" style="padding: 20px; border-radius: 20px; border: 5px solid white">
        <div class="header-title">
          <h4 class="card-title text-white" style="font-weight: bold; font-size: 20px">SOAL SURVEY <span style="color: red">*</span></h4>
        </div>
      </div>
      <hr />
      <div v-for="(item, index) in surveyQuestionData" :key="index++">
        <b-card>
          <div class="d-flex align-items-center justify-content-between">
            <b-row>
              <b-col xl="1" lg="1" md="1" sm="1">
                <h6 :class="`mb-0`" style="text-transform: capitalize; font-weight: bolder">{{ index }}</h6>
              </b-col>
              <b-col xl="11" lg="11" md="11" sm="11">
                <h6 :class="`mb-0`" style="text-transform: capitalize; font-weight: bolder">{{ item.question }}</h6>
              </b-col>
              <b-col></b-col>
              <b-col xl="11" lg="11" md="11" sm="11" class="mt-4">
                <b-button class="btn btn-md mt-3 btnQuestion" v-for="answer in item.answers" :key="answer.id" @click="selectAnswer(item.id, answer.answer, answer.option)" :variant="answer.selected ? 'primary' : 'outline-primary'"> {{ answer.option }}. &nbsp; {{ answer.answer }} </b-button>
              </b-col>
            </b-row>
          </div>
        </b-card>
      </div>
    </b-col>

    <b-col xl="7 mb-5" offset-xl="5">
      <button type="submit" class="btn btn-warning w-100 mb-5" @click="validationInput()" style="font-weight: bolder">SUBMIT SURVEY</button>
    </b-col>
  </b-row>
</template>
<script>
import axios from 'axios'
import Swal from 'sweetalert2'

export default {
  data() {
    return {
      ProvinceFetched: false,
      cityFetched: false,
      districtFetched: false,
      villageFetched: false,

      inputNama: '',
      inputUsia: '',
      selectedJenisKelamin: '',
      inputNoHp: '',
      selectedPendidikan: '',
      selectedPekerjaan: '',
      inputAlamat: '-',
      selectedProvince: null,
      selectedCity: null,
      selectedDistrict: null,
      selectedVillage: null,
      inputDusun: '',
      inputRT: '',
      inputRW: '',

      provinces: [],
      cities: [],
      districts: [],
      villages: [],
      rid: localStorage.getItem('rid'),
      rname: localStorage.getItem('rname'),

      selectedAnswers: [],
      buttonVariant: 'outline-primary',
      isAgeInvalid: false,
      selectedQuestionId: null,
      surveyQuestionData: [],
      answers: [],
      provinsiList: null,
      kotaList: null,
      kecamatanList: null,
      kelurahanList: null
    }
  },

  mounted() {
    this.showSurveyQuestion(), this.fetchCities()
  },

  watch: {
    selectedProvince: 'fetchCities',
    selectedCity: 'fetchDistricts',
    selectedDistrict: 'fetchVillages',
    selectedVillage: 'gatheringRegion'
  },

  methods: {
    btnSelectedColor() {
      var data = []

      this.surveyQuestionData.forEach((b) => {
        var modif_pertanyaan = b

        var jawaban = []
        b.answers.forEach((c) => {
          var modif = c

          modif.selected = false
          this.selectedAnswers.forEach((d) => {
            if (d.question_id === c.question_id) {
              if (c.option === d.answer) {
                modif.selected = true
              }
            }
          })

          jawaban.push(modif)
        })

        modif_pertanyaan.answers = jawaban

        data.push(modif_pertanyaan)
      })

      this.surveyQuestionData = data //test this
    },

    async showSurveyQuestion() {
      const id = 1

      try {
        const config = { headers: { Authorization: 'Bearer ' + localStorage.getItem('token') } }
        const response = await axios.get(`/api/survey/get_questions_answers/3`, config)

        this.surveyQuestionData = response.data.data

        console.log('ðŸ’š Data Question ', id, ' fetched', this.surveyQuestionData)
      } catch (error) {
        console.error('Failed to fetch ðŸ’€:', error.message)
      }
    },

    fetchProvinces() {
      this.ProvinceFetched = false
      axios
        .get('/api/indonesia/provinces')
        .then((response) => {
          this.provinces = response.data.data

          this.ProvinceFetched = true
        })
        .catch((error) => {
          console.error('Error fetching provinces', error)
        })
    },

    fetchCities() {
      this.cityFetched = false
      if (this.rid) {
        console.log('ðŸ’š PROVINCE', this.selectedProvince)

        axios
          .get(`/api/indonesia/cities?province_code=${this.rid}`)
          .then((response) => {
            this.cities = response.data.data
            this.districts = []
            this.villages = []

            this.cityFetched = true
          })
          .catch((error) => {
            console.error('Error fetching cities', error)
          })
      }
    },

    fetchDistricts() {
      this.districtFetched = false
      if (this.selectedCity) {
        console.log('ðŸ’š CITY', this.selectedCity)
        axios
          .get(`/api/indonesia/districts?city_code=${this.selectedCity}`)
          .then((response) => {
            this.districts = response.data.data
            this.villages = []

            this.districtFetched = true
          })
          .catch((error) => {
            console.error('Error fetching districts', error)
          })
      }
    },

    fetchVillages() {
      this.villageFetched = false
      if (this.selectedDistrict) {
        console.log('ðŸ’š DISTRICT', this.selectedDistrict)
        axios
          .get(`/api/indonesia/villages?district_code=${this.selectedDistrict}`)
          .then((response) => {
            this.villages = response.data.data

            this.villageFetched = true
          })
          .catch((error) => {
            console.error('Error fetching villages', error)
          })
      }
    },

    gatheringRegion() {
      if (this.selectedVillage) {
        console.log('ðŸ’š VILLAGE', this.selectedVillage)

        localStorage.setItem('provinsi', this.rid)
        localStorage.setItem('kota', this.selectedCity)
        localStorage.setItem('kecamatan', this.selectedDistrict)
        localStorage.setItem('kelurahan', this.selectedVillage)

        console.clear()
        console.log('ðŸ‘‰ ', localStorage.getItem('provinsi'), localStorage.getItem('kota'), localStorage.getItem('kecamatan'), localStorage.getItem('kelurahan'))
      }
    },

    toggleVariant() {
      this.buttonVariant = this.buttonVariant === 'outline-primary' ? 'primary' : 'outline-primary'
    },

    selectAnswer(idQuestion, idText, idValue) {
      console.log('ðŸ‘‰ NO', idQuestion, '|JAWABAN ', idValue, idText)

      const Toast = Swal.mixin({
        toast: true,
        position: 'top-end',
        showConfirmButton: false,
        timer: 1500,
        timerProgressBar: true,
        didOpen: (toast) => {
          toast.onmouseenter = Swal.stopTimer
          toast.onmouseleave = Swal.resumeTimer
        }
      })
      Toast.fire({
        icon: 'success',
        title: `PERTANYAAN ${idQuestion}, ${idText}`
      })

      // Check if the question is already in the selectedAnswers array
      const existingIndex = this.selectedAnswers.findIndex((item) => item.question_id === idQuestion)

      if (existingIndex !== -1) {
        console.log('CHANGE ðŸ‘‰ NO', idQuestion, '|JAWABAN ', idValue, idText)
        this.selectedAnswers[existingIndex] = { question_id: idQuestion, answer: idValue }
      } else {
        this.selectedAnswers.push({ question_id: idQuestion, answer: idValue })
      }

      this.btnSelectedColor()
      console.log(this.selectedAnswers)
    },

    // INPUT VALIDATION
    validationInput() {
      if (!this.inputNama) {
        Swal.fire({
          icon: 'error',
          title: 'NAMA',
          text: '(tidak boleh kosong)',
          showConfirmButton: false,
          timer: 1500
        })
        return
      }

      if (!this.inputUsia) {
        Swal.fire({
          icon: 'error',
          title: 'USIA',
          text: '(tidak boleh kosong)',
          showConfirmButton: false,
          timer: 1500
        })
        return
      }

      if (!this.selectedJenisKelamin) {
        Swal.fire({
          icon: 'error',
          title: 'JENIS KELAMIN',
          text: '(tidak boleh kosong)',
          showConfirmButton: false,
          timer: 1500
        })
        return
      }

      // if (!this.inputNoHp) {
      //   Swal.fire({
      //     icon: 'error',
      //     title: 'NO HP',
      //     text: '(tidak boleh kosong)',
      //     showConfirmButton: false,
      //     timer: 1500
      //   })
      //   return
      // }

      if (!this.inputRT) {
        Swal.fire({
          icon: 'error',
          title: 'RT',
          text: '(tidak boleh kosong)',
          showConfirmButton: false,
          timer: 1500
        })
        return
      }

      if (!this.inputRW) {
        Swal.fire({
          icon: 'error',
          title: 'RW',
          text: '(tidak boleh kosong)',
          showConfirmButton: false,
          timer: 1500
        })
        return
      }

      if (!this.selectedCity) {
        Swal.fire({
          icon: 'error',
          title: 'KOTA',
          text: '(tidak boleh kosong)',
          showConfirmButton: false,
          timer: 1500
        })
        return
      }

      if (!this.selectedDistrict) {
        Swal.fire({
          icon: 'error',
          title: 'KECAMATAN',
          text: '(tidak boleh kosong)',
          showConfirmButton: false,
          timer: 1500
        })
        return
      }

      if (!this.selectedVillage) {
        Swal.fire({
          icon: 'error',
          title: 'KELURAHAN',
          text: '(tidak boleh kosong)',
          showConfirmButton: false,
          timer: 1500
        })
        return
      }

      console.log('ðŸ’š Validation Passed')
      this.submitSurvey()
    },

    validateAge() {
      const enteredAge = parseInt(this.inputUsia, 10)
      this.isAgeInvalid = enteredAge < 17
    },

    // SUBMIT SURVEY
    async submitSurvey() {
      const config = {
        headers: { Authorization: 'Bearer ' + localStorage.getItem('token') }
      }

      // console.log(JSON.stringify(this.selectedAnswers))

      const formData = new FormData()
      formData.append('name', this.inputNama)
      formData.append('age', this.inputUsia)
      formData.append('gender', this.selectedJenisKelamin)
      formData.append('phone', this.inputNoHp)
      formData.append('address', this.inputAlamat)
      formData.append('rt', this.inputRT)
      formData.append('rw', this.inputRW)
      formData.append('json_answers', JSON.stringify(this.selectedAnswers))
      formData.append('indonesia_province_code', this.rid)
      formData.append('indonesia_city_code', this.selectedCity)
      formData.append('indonesia_district_code', this.selectedDistrict)
      formData.append('indonesia_village_code', this.selectedVillage)
      formData.append('additional_data', this.inputDusun)

      console.log(formData, config)

      await axios
        .post('/api/survey/submit/3', formData, config)
        .then((response) => {
          // console.clear()
          console.log('ðŸ’š SURVEY JOJGA SUBMITTED', response.data.data)
          console.log('ðŸ‘½ RESETING FORM__')

          Swal.fire({
            title: 'Terimakasih!',
            text: 'Survey telah berhasil disimpan ðŸ˜Š',
            icon: 'success',
            showCancelButton: true,
            confirmButtonText: 'Lihat List Survey',
            cancelButtonText: 'Input Survey Lagi'
          }).then((result) => {
            if (result.isConfirmed) {
              window.location.href = '/relawan'
            } else if (result.dismiss === Swal.DismissReason.cancel) {
              window.location.href = '/relawan/input-survey-jogja'
            }
          })
        })
        .catch((error) => {
          console.error('Error SUBMIT:', error)
        })
    }
  }
}
</script>

<style lang="scss">
@media only screen and (max-width: 950px) {
  .custom-mobile {
    margin-top: 120px !important;
  }
}

.dropdown-toggle-no-caret::after {
  content: unset;
  border: 0;
}
.ghost {
  opacity: 0.5;
}
.list-group-item {
  cursor: move;
}
.list-group-item i {
  cursor: pointer;
}

.addCard:hover {
  background-color: rgba(0, 0, 0, 0.637) !important;
}

.btnQuestion {
  margin-right: 10px;
  text-transform: uppercase;
  font-weight: bold;
}
</style>
